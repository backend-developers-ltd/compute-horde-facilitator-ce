# Generated by Django 4.2.10 on 2024-03-05 15:06

import django.contrib.postgres.fields
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="Channel",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=255)),
            ],
        ),
        migrations.CreateModel(
            name="Job",
            fields=[
                (
                    "uuid",
                    models.UUIDField(blank=True, editable=False, primary_key=True, serialize=False),
                ),
                ("created_at", models.DateTimeField(default=django.utils.timezone.now)),
                (
                    "docker_image",
                    models.CharField(
                        blank=True,
                        help_text="docker image for job execution",
                        max_length=255,
                    ),
                ),
                (
                    "raw_script",
                    models.TextField(blank=True, help_text="raw script to be executed"),
                ),
                (
                    "args",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.CharField(max_length=255),
                        blank=True,
                        default=list,
                        help_text="arguments passed to the script or docker image",
                        size=None,
                    ),
                ),
                (
                    "env",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="environment variables for the job",
                    ),
                ),
                (
                    "use_gpu",
                    models.BooleanField(default=False, help_text="Whether to use GPU for the job"),
                ),
                (
                    "input_url",
                    models.URLField(blank=True, help_text="URL to the input data source"),
                ),
                (
                    "output_upload_url",
                    models.TextField(blank=True, help_text="URL for uploading output"),
                ),
                (
                    "output_download_url",
                    models.TextField(blank=True, help_text="URL for retrieving output"),
                ),
            ],
        ),
        migrations.CreateModel(
            name="JobStatus",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "status",
                    models.SmallIntegerField(
                        choices=[
                            (-2, "Failed"),
                            (-1, "Rejected"),
                            (0, "Sent"),
                            (1, "Accepted"),
                            (2, "Completed"),
                        ]
                    ),
                ),
                ("metadata", models.JSONField(blank=True, default=dict)),
                ("created_at", models.DateTimeField(default=django.utils.timezone.now)),
            ],
            options={
                "verbose_name_plural": "Job statuses",
            },
        ),
        migrations.CreateModel(
            name="Miner",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("ss58_address", models.CharField(max_length=48, unique=True)),
                ("is_active", models.BooleanField()),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="Validator",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("ss58_address", models.CharField(max_length=48, unique=True)),
                ("is_active", models.BooleanField()),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.AddConstraint(
            model_name="validator",
            constraint=models.UniqueConstraint(fields=("ss58_address",), name="unique_validator_ss58_address"),
        ),
        migrations.AddConstraint(
            model_name="miner",
            constraint=models.UniqueConstraint(fields=("ss58_address",), name="unique_miner_ss58_address"),
        ),
        migrations.AddField(
            model_name="jobstatus",
            name="job",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="statuses",
                to="core.job",
            ),
        ),
        migrations.AddField(
            model_name="job",
            name="miner",
            field=models.ForeignKey(
                blank=True,
                on_delete=django.db.models.deletion.PROTECT,
                related_name="jobs",
                to="core.miner",
            ),
        ),
        migrations.AddField(
            model_name="job",
            name="user",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.PROTECT,
                related_name="jobs",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AddField(
            model_name="job",
            name="validator",
            field=models.ForeignKey(
                blank=True,
                on_delete=django.db.models.deletion.PROTECT,
                related_name="jobs",
                to="core.validator",
            ),
        ),
        migrations.AddField(
            model_name="channel",
            name="validator",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="channels",
                to="core.validator",
            ),
        ),
        migrations.AddConstraint(
            model_name="jobstatus",
            constraint=models.UniqueConstraint(fields=("job", "status"), name="unique_job_status"),
        ),
        migrations.AddIndex(
            model_name="job",
            index=models.Index(fields=["validator", "-created_at"], name="idx_job_validator_created_at"),
        ),
        migrations.AddConstraint(
            model_name="job",
            constraint=models.CheckConstraint(
                check=models.Q(
                    models.Q(
                        ("docker_image", ""),
                        models.Q(("raw_script", ""), _negated=True),
                    ),
                    models.Q(
                        models.Q(("docker_image", ""), _negated=True),
                        ("raw_script", ""),
                    ),
                    _connector="OR",
                ),
                name="docker_image_or_raw_script",
            ),
        ),
        migrations.AddConstraint(
            model_name="channel",
            constraint=models.UniqueConstraint(fields=("name",), name="unique_channel_name"),
        ),
    ]
